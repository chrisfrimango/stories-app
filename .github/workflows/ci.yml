name: Run Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-22.04

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      NODE_ENV: test
      CI: true

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --mount type=tmpfs,destination=/var/lib/postgresql/data

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Debug information
      - name: Debug Info
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Current directory: $(pwd)"
          ls -la

      # Frontend installation with verbose logging
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          echo "Installing frontend dependencies..."
          npm cache clean --force
          npm install --verbose
        continue-on-error: false

      # Backend installation with verbose logging
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          echo "Installing backend dependencies..."
          npm cache clean --force
          npm install --verbose
        continue-on-error: false

      - name: Run Database Migrations
        working-directory: ./backend
        run: |
          echo "Running database migrations..."
          npm run migrate
        continue-on-error: false

      - name: Start Backend
        working-directory: ./backend
        run: |
          echo "Starting backend server..."
          npm run dev &
          sleep 10

      - name: Run Cypress Component tests with coverage
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
          component: true
          browser: chrome
          command: npm run cypress:coverage:component

      - name: Run Cypress E2E tests with coverage
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
          browser: chrome
          start: npm run dev
          wait-on: "http://localhost:5173, http://localhost:3000"
          wait-on-timeout: 120
          command: npm run cypress:coverage

      - name: Create artifact directories
        run: |
          mkdir -p frontend/cypress/videos
          mkdir -p frontend/cypress/screenshots
          mkdir -p frontend/coverage

      - name: Generate coverage report
        working-directory: ./frontend
        run: npm run coverage:report

      - name: Upload test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            frontend/cypress/videos/**
            frontend/cypress/screenshots/**
            frontend/coverage/**
          retention-days: 30
